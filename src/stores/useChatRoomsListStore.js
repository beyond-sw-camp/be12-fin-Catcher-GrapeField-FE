import { defineStore } from 'pinia'
import { ref } from 'vue'
import axios from 'axios'

export const useChatRoomListStore = defineStore('chatRoomList', () => {
  const rooms = ref([])
  const loading = ref(false)
  const error = ref(null)
  const page = ref(0)
  const isLast = ref(false)

  const API_ENDPOINTS = {
    all: '/api/chat/list/all',
    performances: '/api/chat/list/performance',
    exhibitions: '/api/chat/list/exhibition',
    myPageRooms: '/api/chat/list/my-page',
  }
  
    // Ï±ÑÌåÖÎ∞© Ìá¥Ïû•

    const leaveRoom = async (roomId) => {
      try {
        const res = await axios.delete(`/api/chatroom/leave/${roomId}`, {
          withCredentials: true
        })
    
        // ‚úÖ ÌòÑÏû¨ rooms Î™©Î°ù ÎÇ¥ÏóêÏÑú participantCount Í∞±Ïã†
        updateParticipantCount(roomId, res.data.participantCount)
    
        // ‚úÖ üëâ Ïó¨Í∏∞ÏÑú chatStoreÎèÑ Í∞ôÏù¥ ÏóÖÎç∞Ïù¥Ìä∏
        const chatStore = useChatStore()
        chatStore.removeRoom(roomId)
    
        return res.data.message || 'Ï±ÑÌåÖÎ∞©ÏùÑ Ìá¥Ïû•ÌñàÏäµÎãàÎã§.'
      } catch (err) {
        console.error('Ï±ÑÌåÖÎ∞© Ìá¥Ïû• Ïã§Ìå®:', err)
        throw new Error('Ìá¥Ïû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî.')
      }
    }
    const updateParticipantCount = (roomId, count) => {
      const room = rooms.value.find(r => r.roomIdx === roomId)
      if (room) room.participantCount = count
    }
    
    
  // üßπ Ï¥àÍ∏∞Ìôî + Ï≤´ ÌéòÏù¥ÏßÄ Î∂àÎü¨Ïò§Í∏∞
  const fetchRooms = async (type = 'all') => {
    loading.value = true
    error.value = null
    page.value = 0
    rooms.value = []

    try {
      const res = await axios.get(`${API_ENDPOINTS[type]}?page=0&size=20`, { withCredentials: true })
      rooms.value = res.data.content
      isLast.value = res.data.last
    } catch (err) {
      error.value = err
      rooms.value = []
    } finally {
      loading.value = false
    }
  }

  // ‚ûï Îã§Ïùå ÌéòÏù¥ÏßÄ Î∂àÎü¨Ïò§Í∏∞ (Î¨¥Ìïú Ïä§ÌÅ¨Î°§ ÎòêÎäî ÎçîÎ≥¥Í∏∞ Î≤ÑÌäºÏö©)
  const loadMoreRooms = async (type = 'all') => {
    if (loading.value || isLast.value) return

    loading.value = true
    error.value = null

    try {
      const res = await axios.get(`${API_ENDPOINTS[type]}?page=${page.value + 1}&size=20`, { withCredentials: true })
      rooms.value.push(...res.data.content)
      isLast.value = res.data.last
      page.value++
    } catch (err) {
      error.value = err
    } finally {
      loading.value = false
    }
  }

  return {
    rooms,
    loading,
    error,
    page,
    isLast,
    fetchRooms,
    loadMoreRooms,
    updateParticipantCount  // ‚úÖ Ïù¥Í±∞ export Íº≠ Ìï¥Ïïº Ìï®!
  }
})
